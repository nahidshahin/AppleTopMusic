package com.firstapp.appletopmusic.toplistbrowse;

import android.annotation.TargetApi;
import android.app.ProgressDialog;
import android.content.ContentValues;
import android.content.res.Resources;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.Drawable;
import android.os.AsyncTask;
import android.os.Build;
import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.Gravity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TabHost;
import android.widget.TextView;
import android.widget.Toast;

import com.firstapp.appletopmusic.dao.SongDao;
import com.firstapp.appletopmusic.model.Song;
import com.firstapp.appletopmusic.util.Utils;

import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.NameValuePair;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.params.ConnManagerParams;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.json.JSONArray;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;


public class TopListBrowse extends ActionBarActivity {
    static final String TAG = "TopListBrowse";

    List<Song> songs = new ArrayList<Song>();
    List<Song> favSongs = new ArrayList<Song>();
    ListView songListView;
    ListView favSongListView;
    SQLiteDatabase db;
    SongDao sdao;
    byte[] noPrevImg = null;
    SongListAdapter adapter = null;
    FavSongListAdapter favsadapter = null;
    private ProgressDialog dialog = null;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        adapter = new SongListAdapter ();
        favsadapter = new FavSongListAdapter();


        sdao = new SongDao(this);
        setContentView(R.layout.activity_top_list_browse);

        songListView = (ListView) findViewById(R.id.listView);
        favSongListView = (ListView) findViewById(R.id.favListView);
        TabHost tabHost = (TabHost) findViewById(R.id.tabHost);

        tabHost.setup();

        TabHost.TabSpec tabSpec = tabHost.newTabSpec("topList");
        tabSpec.setContent(R.id.listView);
        tabSpec.setIndicator("Top Chart");
        tabHost.addTab(tabSpec);

        tabSpec = tabHost.newTabSpec("favList");
        tabSpec.setContent(R.id.favListView);
        //R.raw.songs;
        tabSpec.setIndicator("Favorite Songs");
        tabHost.addTab(tabSpec);

        System.out.println("Opening file");
        /* InputStream ins = getResources().openRawResource(
                getResources().getIdentifier("songs",
                        "raw", getPackageName())); */
        InputStream imgIns = getResources().openRawResource(
                getResources().getIdentifier("nopreview",
                        "raw", getPackageName()));
        String jsonString = "";
        try {
            ByteArrayOutputStream nopreviewImgBuffer = new ByteArrayOutputStream();
            int nRead;
            byte[] data = new byte[16384];
            while ((nRead = imgIns.read(data, 0, data.length)) != -1) {
                nopreviewImgBuffer.write(data, 0, nRead);
            }
            nopreviewImgBuffer.flush();
            noPrevImg = nopreviewImgBuffer.toByteArray();

            /*
            BufferedReader br = new BufferedReader(new InputStreamReader(ins));
            StringBuffer sb = new StringBuffer();
            String line = null;
            while ((line = br.readLine()) != null) {
                sb.append(line + "\n");
            }
            jsonString = sb.toString();
            */
            //songs.addAll(Utils.parseJSONForSongs(jsonString));
            Thread thread = new Thread() {
                @Override
                public void run() {
                    try {
                        fetch("https://itunes.apple.com/us/rss/topaudiobooks/limit=10/json");
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            };
            thread.start();

        } catch (IOException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
        loadFavList();
        populateList();
        (new DataCollector()).execute("https://itunes.apple.com/us/rss/topaudiobooks/limit=10/json");
    }

    private byte[] fetch(String urlString) throws Exception {
        System.out.println("fatching = " + urlString);
        DefaultHttpClient httpClient = new DefaultHttpClient();
        HttpGet request = new HttpGet(urlString);
        HttpResponse response = httpClient.execute(request);
        InputStream is= response.getEntity().getContent();

        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        int nRead;
        byte[] data = new byte[16384];
        while ((nRead = is.read(data, 0, data.length)) != -1) {
            buffer.write(data, 0, nRead);
        }
        buffer.flush();
        byte[] tmp = buffer.toByteArray();
        buffer.close();
        is.close();
        System.out.println("fatched = " + tmp.length);
        return tmp;
    }

    private void loadFavList() {
        try{
            favSongs.clear();
            db = sdao.getWritableDatabase();
            String sql = "SELECT * FROM " + SongDao.TABLE;
            Cursor cursor = db.rawQuery(sql, new String[] {});
            while (cursor.moveToNext()) {
                favSongs.add(new Song(cursor.getString(0), cursor.getString(1), cursor.getBlob(2) ) );
            }
            db.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void populateList() {
        songListView.setAdapter(adapter);
        favSongListView.setAdapter(favsadapter);

        songListView.setOnItemClickListener(
                new AdapterView.OnItemClickListener() {
                    @Override
                    public void onItemClick(AdapterView<?> parent, View view,
                                            final int position, long id) {
                        Song song = (Song)parent.getAdapter().getItem(position);
                        System.out.println( "song name [" + song.getName() );
                        for(Song s : favSongs) {
                            System.out.println( "fav song name [" + s.getName() );
                        }
                        System.out.println( "exist [" + favSongs.contains(song) );
                        if( !favSongs.contains(song) ) {
                            try {
                                db = sdao.getWritableDatabase();
                                ContentValues values = new ContentValues();
                                values.clear();
                                values.put(SongDao.C_NAME, song.getName());
                                values.put(SongDao.C_ARTIST, song.getArtist());
                                values.put(SongDao.C_COVERIMAGE, song.getCoverImage());
                                db.insertOrThrow(SongDao.TABLE, null, values);
                                Log.d(TAG, String.format("%s: %s added", song.getName(), song.getArtist()));
                                favSongs.add(song);
                                db.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            favsadapter.notifyDataSetChanged();
                            Toast.makeText(getApplicationContext(), song.getName() + " by " + song.getArtist() + " has been added to your Favourite List!", Toast.LENGTH_SHORT).show();
                        }
                    }
                }
        );

        favSongListView.setOnItemClickListener(
                new AdapterView.OnItemClickListener() {
                    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
                    @Override
                    public void onItemClick(AdapterView<?> parent, View view,
                                            final int position, long id) {
                        Song song = (Song) parent.getAdapter().getItem(position);
                        if (favSongs.contains(song)) {
                            try {
                                db = sdao.getWritableDatabase();
                                String delSql = "DELETE FROM " + SongDao.TABLE + " WHERE " + SongDao.C_NAME + " = ? AND " + SongDao.C_ARTIST + " = ?  ";
                                SQLiteStatement delStmt = db.compileStatement(delSql);
                                delStmt.clearBindings();
                                delStmt.bindString(1, song.getName());
                                delStmt.bindString(2, song.getArtist());
                                int numOfSong = delStmt.executeUpdateDelete();
                                Log.d(TAG, String.format("%d: songs having name %s deleted", numOfSong, song.getName()));
                                favSongs.remove(song);
                                db.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            favsadapter.notifyDataSetChanged();
                            Toast.makeText(getApplicationContext(), song.getName() + " by " + song.getArtist() + " has been deleted from your Favourite List!", Toast.LENGTH_SHORT).show();
                        }
                    }
                }
        );

    }

    private class FavSongListAdapter extends ArrayAdapter<Song> {
        public FavSongListAdapter() {
            super(TopListBrowse.this, R.layout.songlistliew_item, favSongs);
        }
        @Override
        public View getView(int position, View view, ViewGroup parent) {
            if (view == null)
                view = getLayoutInflater().inflate(R.layout.songlistliew_item, parent, false);

            Song song = favSongs.get(position);

            TextView name = (TextView) view.findViewById(R.id.songName);
            name.setText(song.getName());
            TextView url = (TextView) view.findViewById(R.id.sUrl);
            url.setText(song.getArtist());
            ImageView ivContactImage = (ImageView) view.findViewById(R.id.idSongCoverImage);
            byte[] coverImg = song.getCoverImage() == null || song.getCoverImage().length <= 0 ? noPrevImg : song.getCoverImage();
            Bitmap bmp = BitmapFactory.decodeByteArray(coverImg, 0, coverImg.length);
            ivContactImage.setImageBitmap(bmp);
            return view;
        }

    }

    private class SongListAdapter extends ArrayAdapter<Song> {
        public SongListAdapter() {
            super(TopListBrowse.this, R.layout.songlistliew_item, songs);
        }
        @Override
        public View getView(int position, View view, ViewGroup parent) {
            if (view == null)
                view = getLayoutInflater().inflate(R.layout.songlistliew_item, parent, false);

            Song song = songs.get(position);

            TextView name = (TextView) view.findViewById(R.id.songName);
            name.setText(song.getName());
            TextView url = (TextView) view.findViewById(R.id.sUrl);
            url.setText(song.getArtist());
            ImageView ivContactImage = (ImageView) view.findViewById(R.id.idSongCoverImage);
            byte[] coverImg = song.getCoverImage() == null || song.getCoverImage().length <= 0 ? noPrevImg : song.getCoverImage();
            Bitmap bmp = BitmapFactory.decodeByteArray(coverImg, 0, coverImg.length);
            ivContactImage.setImageBitmap(bmp);
            return view;
        }

    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {

        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.top_list_browse, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();
        if (id == R.id.action_settings) {
            return true;
        }
        return super.onOptionsItemSelected(item);
    }


    public class DataCollector extends AsyncTask<String, Void, String> {
        private static final int REGISTRATION_TIMEOUT = 3 * 1000;
        private static final int WAIT_TIMEOUT = 30 * 1000;
        private final HttpClient httpclient = new DefaultHttpClient();
        final HttpParams params = httpclient.getParams();
        HttpResponse response;
        private String content =  null;
        private boolean error = false;
        private ProgressDialog dialog = new ProgressDialog(TopListBrowse.this);

        protected void onPreExecute() {
            dialog.setMessage("Getting your data... Please wait...");
            dialog.show();
        }

        protected String doInBackground(String... urls) {

            String URL = null;

            try {

                URL = urls[0];
                HttpGet request = new HttpGet(URL);


                HttpConnectionParams.setConnectionTimeout(params, REGISTRATION_TIMEOUT);
                HttpConnectionParams.setSoTimeout(params, WAIT_TIMEOUT);
                ConnManagerParams.setTimeout(params, WAIT_TIMEOUT);

                HttpResponse response = httpclient.execute(request);
                //InputStream is= response.getEntity().getContent();


                StatusLine statusLine = response.getStatusLine();
                if(statusLine.getStatusCode() == HttpStatus.SC_OK){
                    ByteArrayOutputStream out = new ByteArrayOutputStream();
                    response.getEntity().writeTo(out);
                    out.close();
                    content = out.toString();
                    songs.clear();
                    for(Song song : Utils.parseJSONForSongs( content ) ) {
                        song.setCoverImage( fetch( song.getUrl() ) );
                        songs.add(song);
                    }
                    //adapter.notifyDataSetChanged();
                    songListView.refreshDrawableState();
                } else{
                    //Closes the connection.
                    Log.w("HTTP1:",statusLine.getReasonPhrase());
                    response.getEntity().getContent().close();
                    throw new IOException(statusLine.getReasonPhrase());
                }
            } catch (ClientProtocolException e) {
                Log.w("HTTP2:",e );
                content = e.getMessage();
                error = true;
                cancel(true);
            } catch (IOException e) {
                Log.w("HTTP3:",e );
                content = e.getMessage();
                error = true;
                cancel(true);
            }catch (Exception e) {
                Log.w("HTTP4:",e );
                content = e.getMessage();
                error = true;
                cancel(true);
            }

            return content;
        }

        protected void onPostExecute(String content) {
            dialog.dismiss();
            if (error) {
                Toast toast = Toast.makeText(TopListBrowse.this, "Error on URL fetch", Toast.LENGTH_LONG);
                toast.setGravity(Gravity.TOP, 0, 75);
                toast.show();
            }
        }
    }

}
